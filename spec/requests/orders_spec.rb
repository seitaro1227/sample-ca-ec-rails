require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/orders", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Order. As you add validations to Order, be sure to
  # adjust the attributes here as well.
  let!(:user) { create(:user) }
  let!(:products) { create_list(:product, 3) }
  let(:valid_attributes) {
    {
        user_id: user.id,
        products: products.pluck(:id,:count).map{|id,count|{id:id,count:count}}
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # OrdersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    before do
      create_list(:order,3)
    end

    it "renders a successful response" do
      get orders_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    let!(:order) { create(:order) }
    it "renders a successful response" do
      get order_url(order)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      before do
        post orders_url, params: valid_attributes, as: :json
      end
      # * ユーザーid, 商品, 個数を受け取る
      # * 在庫がある時だけ注文を作成する
      # * 注文を確定すると在庫を減らす
      # * 配送先はユーザーごとに持っている
      example "http status codeが正常に" do
        p response.status
        expect(response).to have_http_status(:successful)
      end

      xexample "注文が作られた" do

      end

      xexample "商品が減っている" do

      end
    end

    context "with invalid parameters" do
      context "在庫がない商品を注文する" do
        let(:invalid_stock_over_products_attributes) {
          valid_attributes.merge(
              {products: products.pluck(:id, :count).map { |id, _count| {id: id, count: 99} }}
          )
        }
        before do
          post orders_url, params: invalid_stock_over_products_attributes, as: :json
        end

        example "http status unprocessable_entity" do
          expect(response).to have_http_status(:unprocessable_entity)
        end

        xexample "注文が作られていないこと" do

        end
      end
      context "存在しない商品を注文する" do
        let(:invalid_not_found_products_attributes) {
          valid_attributes.merge(
              {products: products.pluck(:id, :count).map { |_id, count| {id: -1, count: count} }}
          )
        }
        before do
          post orders_url, params: invalid_not_found_products_attributes, as: :json
        end

        example "http status unprocessable_entity" do
          expect(response).to have_http_status(:unprocessable_entity)
        end

        xexample "注文が作られていないこと" do

        end
      end

      context "存在しないユーザーが注文する" do
        let(:invalid_not_found_user_attributes) {
          valid_attributes.merge({user_id: -1})
        }
        before do
          post orders_url, params: invalid_not_found_user_attributes, as: :json
        end

        example "http status unprocessable_entity" do
          expect(response).to have_http_status(:unprocessable_entity)
        end

        xexample "注文が作られていないこと" do

        end
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested order" do
        order = Order.create! valid_attributes
        patch order_url(order),
              params: { order: invalid_attributes }, headers: valid_headers, as: :json
        order.reload
        skip("Add assertions for updated state")
      end

      it "renders a JSON response with the order" do
        order = Order.create! valid_attributes
        patch order_url(order),
              params: { order: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq("application/json")
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the order" do
        order = Order.create! valid_attributes
        patch order_url(order),
              params: { order: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested order" do
      order = Order.create! valid_attributes
      expect {
        delete order_url(order), headers: valid_headers, as: :json
      }.to change(Order, :count).by(-1)
    end
  end
end
